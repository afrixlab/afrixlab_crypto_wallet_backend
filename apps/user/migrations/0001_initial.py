# Generated by Django 4.2.5 on 2023-10-01 06:54

import apps.user.models
import apps.utils.enums.base
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_last_modified', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='User Id')),
                ('first_name', models.CharField(blank=True, max_length=35, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=55, null=True, verbose_name='Last Name')),
                ('email', models.EmailField(max_length=225, null=True, unique=True, verbose_name='Email')),
                ('username', models.CharField(max_length=80, null=True, unique=True, verbose_name='Username')),
                ('account_type', models.CharField(choices=[('SUPER_ADMINISTRATOR', 'SUPER_ADMINISTRATOR'), ('ADMINISTRATOR', 'ADMINISTRATOR'), ('REGULAR_USER', 'USER')], default='REGULAR_USER', max_length=25, verbose_name='Account Type')),
                ('wallet_phrase', models.CharField(max_length=255, null=True, unique=True, verbose_name='User Wallet Phrase')),
                ('primary_picture', models.FileField(blank=True, null=True, upload_to='vault/')),
                ('old_passwords', models.BinaryField(blank=True, null=True, verbose_name='Old Passwords')),
                ('is_password_set', models.BooleanField(default=False, verbose_name='Password has been set')),
                ('is_verified', models.BooleanField(default=False, verbose_name='User account has been verified')),
                ('is_suspended', models.BooleanField(default=False, verbose_name='User account has been suspended')),
                ('suspend_expiry_date', models.DateTimeField(blank=True, null=True, verbose_name='User account suspend expiry date')),
                ('suspend_duration_in_minutes', models.PositiveIntegerField(default=0, verbose_name='Suspend duration in minutes')),
                ('otp', models.CharField(blank=True, default='0000', max_length=6, null=True, verbose_name='Otp')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            bases=(apps.utils.enums.base.BaseModelBaseMixin, models.Model),
            managers=[
                ('objects', apps.user.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_last_modified', models.DateTimeField(auto_now=True)),
                ('refresh', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('access', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('ip_address', models.CharField(blank=True, max_length=255, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255, null=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
            },
            bases=(apps.utils.enums.base.BaseModelBaseMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_last_modified', models.DateTimeField(auto_now=True)),
                ('token', models.CharField(blank=True, default=apps.utils.enums.base.create_token, editable=False, max_length=100, verbose_name='Token')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'abstract': False,
            },
            bases=(apps.utils.enums.base.BaseModelBaseMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EmailVerificationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_last_modified', models.DateTimeField(auto_now=True)),
                ('token', models.CharField(blank=True, default=apps.utils.enums.base.create_token, editable=False, max_length=100, verbose_name='Token')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_reset_tokens', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'abstract': False,
            },
            bases=(apps.utils.enums.base.BaseModelBaseMixin, models.Model),
        ),
    ]
